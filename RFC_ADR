# Обоснование использованных библиотек и технологий.

В проекте используются следующие библиотеки:  
Kotlin - основной язык программирования для разработки Android приложений. Плюсы: сокращает объем кода, улучшает читаемость, безопасность по сравнению с Java. Минусы: компиляция может быть медленнее, чем у Java.  
AndroidX Core KTX - предоставляет набор расширений Kotlin для Android API. Плюсы: упрощает работу с Android API, делает код более читаемым. Минусы: может увеличить размер приложения, но преимущества обычно перевешивают этот недостаток.  
AndroidX Lifecycle - библиотека для управления жизненным циклом компонентов Android. Плюсы: упрощает работу с жизненным циклом, предотвращает утечки памяти. Минусы: требует понимания жизненного цикла Android.  
Kotlinx Coroutines - библиотека для асинхронного программирования и управления параллелизмом. Плюсы: упрощает работу с асинхронным кодом, делает его более читаемым. Минусы: требует понимания концепций асинхронного программирования. В рамках проекта позволило удобно реализовать работу с кэшеи и api, рекомендовано к использованию многоими практикующими разработчиками. 
Koin - легковесный фреймворк для внедрения зависимостей. Плюсы: прост в использовании, не требует аннотаций, поддерживает корутины. Минусы: не такой мощный, как Dagger. В многомодульном проекте тяжело верно организовать зависимости без KOIN, его полностью хватает, при этом он быстрее и не использует рефлексию (почти). 
AndroidX Paging - библиотека для поддержки пагинации данных. Плюсы: упрощает загрузку и отображение больших объемов данных. Минусы: требует понимания концепций пагинации. Эффективное решение, помогло быстро закрыть задачу и подкрепить важность других инструментов (coroutines)  
AndroidX Room - библиотека для работы с базами данных SQLite. Плюсы: упрощает работу с SQLite, поддерживает корутины. Минусы: требует понимания SQL.  
Ktor - асинхронный HTTP-клиент и сервер для Kotlin. Плюсы: поддерживает корутины, прост в использовании. Минусы: не такой мощный, как Retrofit.  
JUnit и Mockk - библиотеки для тестирования. Плюсы: упрощают написание тестов, поддерживают мокирование. Минусы: требуют понимания концепций тестирования.  
Compose - новый декларативный UI-фреймворк от Google. Плюсы: упрощает создание UI, делает код более читаемым. Минусы: все еще в активной разработке, может быть нестабильным.  
Material – готовые пакеты представлений, очень ускоряет процесс разработки, позволяет сделать красивый интерфейс в одиночку без дизайнров. Есть эксперементальные API, но крайне необходим в работе над проектом в сжатых сроках. Оптимальное бизнес решение. Возможные оптимизации: переход на свои иконки (уже есть для этого заготовка), переход на свою тему Material, так как родная требует много ресурсов.
Все эти библиотеки были выбраны для упрощения разработки и улучшения качества кода. Они помогают справиться с различными задачами, такими как управление жизненным циклом, асинхронное программирование, внедрение зависимостей, работа с базами данных и создание пользовательского интерфейса.
